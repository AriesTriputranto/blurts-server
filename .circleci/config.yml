version: 2.1

orbs:
    node: circleci/node@4.7.0
    python: circleci/python@1.4.0

executors:
    node:
        docker:
            - image: cimg/node:14.17
    python:
        docker:
            - image: cimg/python:3.9.7
    ubuntu:
        machine:
            image: ubuntu-2004:202107-02

jobs:
    lint-js:
        executor: node
        steps:
            - checkout
            - node/install-packages
            - run: npm run lint:js
    lint-css:
        executor: node
        steps:
            - checkout
            - node/install-packages
            - run: npm run lint:css
    lint-audit:
        executor: node
        steps:
            - checkout
            - node/install-packages
            - run: npm run lint:audit
    lint-l10n:
        executor: python
        steps:
            - checkout
            - run:
                  command: |
                      pip install pipreqs
                      pipreqs ~/project
            - python/install-packages:
                  args: compare-locales
                  pkg-manager: "pip"
            - run:
                  name: Lint and compare locales
                  command: |
                      moz-l10n-lint l10n.toml
                      compare-locales l10n.toml . `ls locales`
    build:
        executor: ubuntu
        environment:
            DATABASE_URL: postgresql://postgres@localhost:5432/blurts
            POSTGRES_USER: postgres
            # TERM: xterm
        steps:
            - checkout
            - run: 
                name: Install postgres
                command: |
                    sudo apt-get update
                    sudo apt-get install postgresql
            - run: pg_isready
            - run:
                command: |
                    sudo -u postgres createdb test-blurts | cat
                no_output_timeout: 15s
            - run:
                  name: Create version.json
                  command: |
                      # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
                      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
                      "$CIRCLE_SHA1" \
                      "$CIRCLE_TAG" \
                      "$CIRCLE_PROJECT_USERNAME" \
                      "$CIRCLE_PROJECT_REPONAME" \
                      "$CIRCLE_BUILD_URL" > version.json
            - run:
                  name: Login to dockerhub
                  command: |
                      if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
                        echo "Skipping Login to Dockerhub, credentials not available."
                      else
                        echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
                      fi

            - run:
                name: Build application Docker in "dev" mode
                command: docker build -t blurts-server . --build-arg dev=true
            - run:
                name: Test Code
                command: docker run --network="host" --env-file .env-dist -e NODE_ENV=tests -e DATABASE_URL=$DATABASE_URL blurts-server npm test

    integration-test:
        machine:
            image: ubuntu-1604:201903-01
        steps:
            - checkout
            - run:
                  name: Build and run tests.
                  command: |
                      export NVM_DIR="/opt/circleci/.nvm"
                      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                      nvm install 14.17 --default
                      node -v
                      cp .env-dist .env
                      npm install
                      sudo chown -R  $USER:$USER .
                      mkdir ./tests/integration/errorShots
                      docker-compose -f tests/integration/docker-compose.yml up --build -d
                      docker-compose -f tests/integration/docker-compose.yml exec --user root firefox npm run test:integration-headless-ci
            - run:
                  name: Capture Logs.
                  when: on_fail
                  command: |
                      docker-compose -f tests/integration/docker-compose.yml logs server &> tests/integration/server.log
                      docker-compose -f tests/integration/docker-compose.yml logs postgres &> tests/integration/postgres.log
                      docker-compose -f tests/integration/docker-compose.yml logs firefox &> tests/integration/firefox.log
            - store_artifacts:
                  path: ./tests/integration/errorShots/
            - store_artifacts:
                  path: ./tests/integration/server.log
            - store_artifacts:
                  path: ./tests/integration/postgres.log
            - store_artifacts:
                  path: ./tests/integration/firefox.log

    deploy:
        docker:
            - image: docker:18.06.3-ce
        steps:
            - setup_remote_docker
            - restore_cache:
                  key: v1-{{.Branch}}
            - run:
                  name: Restore Docker image cache
                  command: docker load -i /cache/docker.tar

            - run:
                  name: Deploy to Dockerhub
                  command: |
                      echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                      # deploy main
                      if [ "${CIRCLE_BRANCH}" == "main" ]; then
                          docker tag blurts-server ${DOCKERHUB_REPO}:latest
                          docker push ${DOCKERHUB_REPO}:latest
                      elif  [ ! -z "${CIRCLE_TAG}" ]; then
                          # deploy a release tag...
                          echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
                          docker tag blurts-server "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
                          docker images
                          docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
                      fi
    deploy_static:
        executor: python
        steps:
            - checkout
            - run:
                  name: Install AWS CLI
                  command: |
                      sudo pip install --upgrade pip
                      sudo pip install --upgrade awscli
            - run:
                  name: Sync static content to S3
                  command: |
                      ./.circleci/scripts/sync-static

workflows:
    lint-build-test-deploy:
        jobs:
            # - lint-js
            # - lint-css
            # - lint-audit
            # - lint-l10n
            - build:
                  filters:
                      tags:
                          only: /.*/
            - integration-test:
                  requires:
                      - build
            - deploy:
                  requires:
                      - build
                  filters:
                      tags:
                          only: /.*/
                      branches:
                          only: main
            - deploy_static:
                  filters:
                      branches:
                          only: main
